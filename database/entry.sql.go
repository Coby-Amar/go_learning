// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: entry.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createReportEntry = `-- name: CreateReportEntry :one
INSERT INTO _report_entries(
    _product_id,
    _report_id,
    _amount,
    _carbohydrate,
    _protein,
    _fat
)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING _id, _created_at, _updated_at, _product_id, _report_id, _amount, _carbohydrate, _protein, _fat
`

type CreateReportEntryParams struct {
	ProductID    uuid.UUID `json:"product"`
	ReportID     uuid.UUID `json:"report"`
	Amount       int16     `json:"amount"`
	Carbohydrate int16     `json:"carbohydrate"`
	Protein      int16     `json:"protein"`
	Fat          int16     `json:"fat"`
}

func (q *Queries) CreateReportEntry(ctx context.Context, arg CreateReportEntryParams) (ReportEntry, error) {
	row := q.db.QueryRowContext(ctx, createReportEntry,
		arg.ProductID,
		arg.ReportID,
		arg.Amount,
		arg.Carbohydrate,
		arg.Protein,
		arg.Fat,
	)
	var i ReportEntry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductID,
		&i.ReportID,
		&i.Amount,
		&i.Carbohydrate,
		&i.Protein,
		&i.Fat,
	)
	return i, err
}

const getReportEntries = `-- name: GetReportEntries :many
SELECT _report_entries._id, _report_entries._created_at, _report_entries._updated_at, _report_entries._product_id, _report_entries._report_id, _report_entries._amount, _report_entries._carbohydrate, _report_entries._protein, _report_entries._fat, _products._name FROM _report_entries 
JOIN _reports ON _reports._id =_report_entries._report_id
JOIN _products ON _products._id =_report_entries._product_id
WHERE _reports._id = $1
`

type GetReportEntriesRow struct {
	ID           uuid.UUID `json:"id"`
	CreatedAt    time.Time
	UpdatedAt    time.Time
	ProductID    uuid.UUID `json:"product"`
	ReportID     uuid.UUID `json:"report"`
	Amount       int16     `json:"amount"`
	Carbohydrate int16     `json:"carbohydrate"`
	Protein      int16     `json:"protein"`
	Fat          int16     `json:"fat"`
	Name         string    `json:"name" validate:"required,min=4,max=200"`
}

func (q *Queries) GetReportEntries(ctx context.Context, ID uuid.UUID) ([]GetReportEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportEntries, ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportEntriesRow
	for rows.Next() {
		var i GetReportEntriesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductID,
			&i.ReportID,
			&i.Amount,
			&i.Carbohydrate,
			&i.Protein,
			&i.Fat,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReportEntry = `-- name: UpdateReportEntry :one
UPDATE _report_entries
SET 
    _amount = $2,
    _carbohydrate = $3,
    _protein = $4,
    _fat = $5
WHERE _report_entries._id = $1
RETURNING _id, _created_at, _updated_at, _product_id, _report_id, _amount, _carbohydrate, _protein, _fat
`

type UpdateReportEntryParams struct {
	ID           uuid.UUID `json:"id"`
	Amount       int16     `json:"amount"`
	Carbohydrate int16     `json:"carbohydrate"`
	Protein      int16     `json:"protein"`
	Fat          int16     `json:"fat"`
}

func (q *Queries) UpdateReportEntry(ctx context.Context, arg UpdateReportEntryParams) (ReportEntry, error) {
	row := q.db.QueryRowContext(ctx, updateReportEntry,
		arg.ID,
		arg.Amount,
		arg.Carbohydrate,
		arg.Protein,
		arg.Fat,
	)
	var i ReportEntry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductID,
		&i.ReportID,
		&i.Amount,
		&i.Carbohydrate,
		&i.Protein,
		&i.Fat,
	)
	return i, err
}
