// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: entries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateReportEntriesParams struct {
	ProductID     pgtype.UUID    `json:"productId" validate:"required,uuid4"`
	ReportID      pgtype.UUID    `json:"reportId" validate:"uuid4"`
	Amount        int16          `json:"amount" validate:"required,min=0"`
	Carbohydrates pgtype.Numeric `json:"carbohydrates" validate:"required,min=0"`
	Proteins      pgtype.Numeric `json:"proteins" validate:"required,min=0"`
	Fats          pgtype.Numeric `json:"fats" validate:"required,min=0"`
}

const deleteReportEntry = `-- name: DeleteReportEntry :exec
DELETE FROM _report_entries
WHERE _report_entries._id = $1
`

func (q *Queries) DeleteReportEntry(ctx context.Context, ID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteReportEntry, ID)
	return err
}

const getReportEntries = `-- name: GetReportEntries :many
SELECT _report_entries._id, _report_entries._created_at, _report_entries._updated_at, _report_entries._amount, _report_entries._carbohydrates, _report_entries._proteins, _report_entries._fats, _report_entries._product_id, _report_entries._report_id, _products._name FROM _report_entries 
JOIN _reports ON _reports._id =_report_entries._report_id
JOIN _products ON _products._id =_report_entries._product_id
WHERE _reports._id = $1
`

type GetReportEntriesRow struct {
	ID            pgtype.UUID `json:"id"`
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	Amount        int16          `json:"amount" validate:"required,min=0"`
	Carbohydrates pgtype.Numeric `json:"carbohydrates" validate:"required,min=0"`
	Proteins      pgtype.Numeric `json:"proteins" validate:"required,min=0"`
	Fats          pgtype.Numeric `json:"fats" validate:"required,min=0"`
	ProductID     pgtype.UUID    `json:"productId" validate:"required,uuid4"`
	ReportID      pgtype.UUID    `json:"reportId" validate:"uuid4"`
	Name          string         `json:"name" validate:"required,min=4,max=200"`
}

func (q *Queries) GetReportEntries(ctx context.Context, ID pgtype.UUID) ([]GetReportEntriesRow, error) {
	rows, err := q.db.Query(ctx, getReportEntries, ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportEntriesRow
	for rows.Next() {
		var i GetReportEntriesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Amount,
			&i.Carbohydrates,
			&i.Proteins,
			&i.Fats,
			&i.ProductID,
			&i.ReportID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReportEntry = `-- name: UpdateReportEntry :one
UPDATE _report_entries
SET 
    _amount = $2,
    _carbohydrates = $3,
    _proteins = $4,
    _fats = $5,
    _updated_at = NOW()
WHERE _report_entries._id = $1
RETURNING _id, _created_at, _updated_at, _amount, _carbohydrates, _proteins, _fats, _product_id, _report_id
`

type UpdateReportEntryParams struct {
	ID            pgtype.UUID    `json:"id"`
	Amount        int16          `json:"amount" validate:"required,min=0"`
	Carbohydrates pgtype.Numeric `json:"carbohydrates" validate:"required,min=0"`
	Proteins      pgtype.Numeric `json:"proteins" validate:"required,min=0"`
	Fats          pgtype.Numeric `json:"fats" validate:"required,min=0"`
}

func (q *Queries) UpdateReportEntry(ctx context.Context, arg UpdateReportEntryParams) (ReportEntry, error) {
	row := q.db.QueryRow(ctx, updateReportEntry,
		arg.ID,
		arg.Amount,
		arg.Carbohydrates,
		arg.Proteins,
		arg.Fats,
	)
	var i ReportEntry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
		&i.Carbohydrates,
		&i.Proteins,
		&i.Fats,
		&i.ProductID,
		&i.ReportID,
	)
	return i, err
}
