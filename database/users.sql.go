// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO _users(
    _name,
    _email,
    _phone_number
)
VALUES ($1,$2,$3)
RETURNING _id, _created_at, _updated_at, _last_login, _active, _name, _email, _phone_number
`

type CreateUserParams struct {
	Name        string
	Email       string
	PhoneNumber string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.PhoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Active,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
	)
	return i, err
}

const createUserVault = `-- name: CreateUserVault :one
INSERT INTO _vault(
    _user_id,
    _hashed_pw
)
VALUES ($1,$2)
RETURNING _id, _created_at, _updated_at, _hashed_pw, _user_id
`

type CreateUserVaultParams struct {
	UserID   uuid.UUID
	HashedPw string
}

func (q *Queries) CreateUserVault(ctx context.Context, arg CreateUserVaultParams) (Vault, error) {
	row := q.db.QueryRowContext(ctx, createUserVault, arg.UserID, arg.HashedPw)
	var i Vault
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPw,
		&i.UserID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM _users
WHERE _users._id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, ID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, ID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u._id, u._created_at, u._updated_at, u._last_login, u._active, u._name, u._email, u._phone_number, v._hashed_pw AS _password FROM _users AS u
JOIN _vault AS v ON v._user_id = u._id 
WHERE u._email = $1
`

type GetUserByEmailRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	LastLogin   time.Time
	Active      bool
	Name        string
	Email       string
	PhoneNumber string
	Password    string
}

func (q *Queries) GetUserByEmail(ctx context.Context, Email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, Email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Active,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT u._id, u._created_at, u._updated_at, u._last_login, u._active, u._name, u._email, u._phone_number, v._hashed_pw AS _password FROM _users AS u
JOIN _vault AS v ON v._user_id = u._id 
WHERE u._id = $1
`

type GetUserByIDRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	LastLogin   time.Time
	Active      bool
	Name        string
	Email       string
	PhoneNumber string
	Password    string
}

func (q *Queries) GetUserByID(ctx context.Context, ID uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, ID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Active,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
	)
	return i, err
}
