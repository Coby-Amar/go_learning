// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: reports.sql

package database

import (
	"context"
	"time"
)

const createReport = `-- name: CreateReport :one
INSERT INTO _reports(
    _date,
    _amout_of_entries,
    _carbohydrates, 
    _proteins,
    _fats
)
VALUES ($1,$2,$3,$4,$5)
RETURNING _id, _created_at, _updated_at, _date, _amout_of_entries, _carbohydrates, _proteins, _fats, _user_id
`

type CreateReportParams struct {
	Date           time.Time `json:"date"`
	AmoutOfEntries int16
	Carbohydrates  int16
	Proteins       int16
	Fats           int16
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, createReport,
		arg.Date,
		arg.AmoutOfEntries,
		arg.Carbohydrates,
		arg.Proteins,
		arg.Fats,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Date,
		&i.AmoutOfEntries,
		&i.Carbohydrates,
		&i.Proteins,
		&i.Fats,
		&i.UserID,
	)
	return i, err
}

const getAllReports = `-- name: GetAllReports :many
SELECT _id, _created_at, _updated_at, _date, _amout_of_entries, _carbohydrates, _proteins, _fats, _user_id FROM _reports
`

func (q *Queries) GetAllReports(ctx context.Context) ([]Report, error) {
	rows, err := q.db.QueryContext(ctx, getAllReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Date,
			&i.AmoutOfEntries,
			&i.Carbohydrates,
			&i.Proteins,
			&i.Fats,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
